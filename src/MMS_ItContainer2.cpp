/*
* ============================================================================
*  Name     : CMMS_ItContainer2 from MMS_ItContainer2.cpp
*  Part of  : MMS_It
*  Created  : 21/11/2004 by 
*  Implementation notes:
*     Initial content was generated by Series 60 AppWizard.
*  Copyright: Makidis Michael 2003-2005
* ============================================================================
*/

// INCLUDE FILES
#include "MMS_ItContainer2.h"
#include "MMS_ItAppUi.h"
#include "MMS_ItDocument.h"

#include <MMS_IT.RSG>  // for the resources
#include "mms_it.hrh"  // for accesing commands
#include <MMS_It.mbg> // for bitmap

#include <eiklabel.h>  // for labels
#include <eikedwin.h>  // for CEikEdwin
#include <stringloader.h>  // for StringLoader

// ================= MEMBER FUNCTIONS =======================

CMMS_ItContainer2::CMMS_ItContainer2(CMMS_ItAppUi* aUI, CMMS_ItDocument* aDocument)
: iUI(aUI), iDocument(aDocument)
{}

// ---------------------------------------------------------
// CMMS_ItContainer2::ConstructL(const TRect& aRect)
// EPOC two phased constructor
// ---------------------------------------------------------
//
void CMMS_ItContainer2::ConstructL(const TRect& aRect)
    {
    CreateWindowL();

	const CFont* fontUsed = iEikonEnv->DenseFont();

    iLblSubject = new (ELeave) CEikLabel;
    iLblSubject->SetContainerWindowL( *this );
    iLblSubject->SetFont( fontUsed );
	iLblSubject->SetTextL(_L(""));

    iLblSmil = new (ELeave) CEikLabel;
    iLblSmil->SetContainerWindowL( *this );
    iLblSmil->SetFont( fontUsed );
	iLblSubject->SetTextL(_L(""));

	iLblAttach = new (ELeave) CEikLabel;
    iLblAttach->SetContainerWindowL( *this );
    iLblAttach->SetFont( fontUsed );
	iLblSubject->SetTextL(_L(""));

	// Create the editor
    iEdwin = new (ELeave) CEikEdwin;
    iEdwin->SetContainerWindowL(*this);

	// Set the flags & construct
	iEdwin->SetAknEditorFlags(EAknEditorFlagEnableScrollBars);
	iEdwin->ConstructL( EEikEdwinWidthInPixels |
						EEikEdwinNoAutoSelection |
						EEikEdwinNoHorizScrolling |
						EEikEdwinLineCursor
						, aRect.Width(),1024,5);

	// load the bitmap
	_LIT(KTxtMBMname,"MMS_It.mbm");
	iPicSubject = new (ELeave) CFbsBitmap();
	LoadBitmapL(iPicSubject, KTxtMBMname, EMbmMms_itSubject, ETrue);
	iPicSmil = new (ELeave) CFbsBitmap();
	LoadBitmapL(iPicSmil, KTxtMBMname, EMbmMms_itSmil, ETrue);
	iPicAttach = new (ELeave) CFbsBitmap();
	LoadBitmapL(iPicAttach, KTxtMBMname, EMbmMms_itAttach, ETrue);

	SetRect(aRect);
    ActivateL();

	iEdwin->SetFocus(ETrue);

	UpdateEditorL();
	UpdateLabelsL();
    }

// Destructor
CMMS_ItContainer2::~CMMS_ItContainer2()
    {
	SaveMessageText();
    delete iLblSubject;
    delete iLblSmil;
	delete iLblAttach;
	delete iEdwin;

	delete iPicSubject;
	delete iPicSmil;
	delete iPicAttach;
    }

// ---------------------------------------------------------
// CMMS_ItContainer2::SizeChanged()
// Called by framework when the view size is changed
// ---------------------------------------------------------
//
void CMMS_ItContainer2::SizeChanged()
    {

    iLblSubject->SetExtent( TPoint(20, 3), TSize(153, 15) );

    iLblSmil->SetExtent( TPoint(20, 18), TSize(120, 15) );

	iLblAttach->SetExtent( TPoint(160, 18), TSize(30, 15) );

	iEdwin->SetExtent(TPoint(0, 33), iEdwin->MinimumSize() );
    }

// ---------------------------------------------------------
// CMMS_ItContainer2::CountComponentControls() const
// ---------------------------------------------------------
//
TInt CMMS_ItContainer2::CountComponentControls() const
    {
    return 4; // return nbr of controls inside this container
    }

// ---------------------------------------------------------
// CMMS_ItContainer2::ComponentControl(TInt aIndex) const
// ---------------------------------------------------------
//
CCoeControl* CMMS_ItContainer2::ComponentControl(TInt aIndex) const
    {
    switch ( aIndex )
        {
        case 0:
            return iLblSubject;
        case 1:
            return iLblSmil;
        case 2:
            return iLblAttach;
        case 3:
            return iEdwin;
        default:
            return NULL;
        }
    }

// ---------------------------------------------------------
// CMMS_ItContainer2::OfferKeyEventL(...)
// Notify key events to editors.
// ---------------------------------------------------------
//
TKeyResponse CMMS_ItContainer2::OfferKeyEventL(
    const TKeyEvent& aKeyEvent, TEventCode aType)
    {
        switch ( aKeyEvent.iCode )
        {
		case EKeyOK:
			{
			iUI->HandleCommandL( EShowAttachments );
			return EKeyWasConsumed;
			}
		case EKeyPhoneSend:
			{
			iUI->HandleCommandL( ESend );
			return EKeyWasConsumed;
			}
        default:
			{
			return iEdwin->OfferKeyEventL(aKeyEvent, aType);
            break;
			}
        }
    }

// ---------------------------------------------------------
// CMMS_ItContainer2::Draw(const TRect& aRect) const
// ---------------------------------------------------------
//
void CMMS_ItContainer2::Draw(const TRect& /*aRect*/) const
    {
    CWindowGc& gc = SystemGc();
	gc.Clear();

	/*gc.SetPenStyle(CGraphicsContext::ENullPen);
    gc.SetBrushColor(KRgbGray);
    gc.SetBrushStyle(CGraphicsContext::ESolidBrush);
    gc.DrawRect(aRect);*/


	// Bitmaps
	TInt x1 = 4;
	TInt x2 = 144;
	TInt y1 = 2;
	TInt y2 = 17;

	TRect rect1(x1, y1, x1+13, y1+13);
	gc.DrawBitmap(rect1, iPicSubject);

	TRect rect2(x1, y2, x1+13, y2+13);
	gc.DrawBitmap(rect2, iPicSmil);

	TRect rect3(x2, y2, x2+13, y2+13);
	gc.DrawBitmap(rect3, iPicAttach);

	gc.SetPenSize(TSize(1,1));
    gc.SetPenColor(KRgbBlack);
	gc.SetPenStyle(CGraphicsContext::ESolidPen);
	gc.DrawLine(TPoint(1, 32), TPoint(175, 32));
    }

// ---------------------------------------------------------
// CMMS_ItContainer2::HandleControlEventL(
//     CCoeControl* aControl,TCoeEvent aEventType)
// ---------------------------------------------------------
//
void CMMS_ItContainer2::HandleControlEventL(
    CCoeControl* /*aControl*/,TCoeEvent /*aEventType*/)
    {
    // TODO: Add your control event handler code here
    }

// based on a Forum Nokia Discussion topic
void CMMS_ItContainer2::LoadBitmapL(CFbsBitmap* aBitMap,const TDesC& aFileName,TInt aId,TBool aShareIfLoaded)
	{
	TFileName DefaultPath;

	// This gives complete path name to the application
	DefaultPath.Copy(CEikonEnv::Static()->EikAppUi()->Application()->AppFullName());

	// now parse and strip of the application name
	TParsePtr parse(DefaultPath);

	// Copy back only drive and path
	DefaultPath.Copy(parse.DriveAndPath()); 

	// Append the filename
	DefaultPath.Append(aFileName);

	User::LeaveIfError(aBitMap->Load(DefaultPath, aId, aShareIfLoaded));
	}

void CMMS_ItContainer2::SaveMessageText()
{
	iEdwin->GetText(iDocument->iMessageText);
}

void CMMS_ItContainer2::UpdateLabelsL()
{
	if(iDocument->SubjectSet())
	{
		iLblSubject->SetTextL(iDocument->GetSubject());
	}
	else
	{
		HBufC* textResource = StringLoader::LoadLC(R_NO_SUBJECT);
		iLblSubject->SetTextL(*textResource);
		CleanupStack::PopAndDestroy(textResource);
	}

	if(iDocument->SMILAttSet())
	{
		TParse p;
		p.Set(iDocument->GetSMILFilename(), NULL, NULL);
		iLblSmil->SetTextL(p.NameAndExt());
	}
	else
	{
		HBufC* textResource2 = StringLoader::LoadLC(R_NO_SMIL);
		iLblSmil->SetTextL(*textResource2);
		CleanupStack::PopAndDestroy(textResource2);
	}

	// Set the labels
	TBuf<4> attachments;
	attachments.AppendNum(iDocument->CountAttachments());
	iLblAttach->SetTextL( attachments );
	
	SizeChanged();
}

void CMMS_ItContainer2::UpdateEditorL()
{
	iEdwin->SetTextL(&iDocument->iMessageText);
}

// End of File  
