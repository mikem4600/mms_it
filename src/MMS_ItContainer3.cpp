/*
* ============================================================================
*  Name     : CMMS_ItContainer3 from MMS_ItContainer3.h
*  Part of  : MMS_It
*  Created  : 21/11/2004 by 
*  Implementation notes:
*     Initial content was generated by Series 60 AppWizard.
*  Copyright: Makidis Michael 2003-2005
* ============================================================================
*/

// INCLUDE FILES
#include "MMS_ItContainer3.h"
#include "MMS_ItAppUi.h"

#include "MMS_ItDocument.h"
#include <MMS_IT.RSG>  // for the resources
#include <MMS_It.mbg> // for icons

#include <akniconarray.h>   // for the icons
#include <aknnotewrappers.h> // for notes
#include <AknQueryDialog.h>  // for queries
#include <stringloader.h>  // for StringLoader
#include <utf.h> // for the UTF converter
#include <akncommondialogs.h>  // for file selection dialog

// ================= MEMBER FUNCTIONS =======================

CMMS_ItContainer3::CMMS_ItContainer3(CMMS_ItAppUi* aUI, CMMS_ItDocument* aDocument)
: iListBox(NULL), iUI(aUI), iDocument(aDocument)
{}

// ---------------------------------------------------------
// CMMS_ItContainer3::ConstructL(const TRect& aRect)
// EPOC two phased constructor
// ---------------------------------------------------------
//
void CMMS_ItContainer3::ConstructL(const TRect& aRect)
    {
    CreateWindowL();
    SetRect(aRect);
    ActivateL();

		// Delete listbox object.
    if ( iListBox )
        {
        delete iListBox;
        iListBox = NULL;
        }

	// Create a new listbox
	iListBox = new ( ELeave )  CAknDoubleLargeStyleListBox();
	iListBox->SetContainerWindowL( *this );

	// Construct listbox.
	if ( iListBox )
        iListBox->ConstructL( this, EAknListBoxSelectionList);

	// Load the icons
	CArrayPtr<CGulIcon>* icons = new( ELeave ) CAknIconArray( 2 );
	CleanupStack::PushL(icons);
	icons->AppendL( iEikonEnv->CreateIconL( _L("\\system\\apps\\MMS_IT\\MMS_It.mbm"),
                                            EMbmMms_itMsg,
                                            EMbmMms_itMsgm ) );
	icons->AppendL( iEikonEnv->CreateIconL( _L("\\system\\apps\\MMS_IT\\MMS_It.mbm"),
                                            EMbmMms_itSound,
                                            EMbmMms_itSoundm ) );
	icons->AppendL( iEikonEnv->CreateIconL( _L("\\system\\apps\\MMS_IT\\MMS_It.mbm"),
                                            EMbmMms_itVideo,
                                            EMbmMms_itVideom ) );
	icons->AppendL( iEikonEnv->CreateIconL( _L("\\system\\apps\\MMS_IT\\MMS_It.mbm"),
                                            EMbmMms_itInstall,
                                            EMbmMms_itInstallm ) );
	icons->AppendL( iEikonEnv->CreateIconL( _L("\\system\\apps\\MMS_IT\\MMS_It.mbm"),
                                            EMbmMms_itImg,
                                            EMbmMms_itImgm ) );
	
	icons->AppendL( iEikonEnv->CreateIconL( _L("\\system\\apps\\MMS_IT\\MMS_It.mbm"),
                                            EMbmMms_itMod,
                                            EMbmMms_itModm ) );

	CleanupStack::Pop(); // icons

	// Sets graphics as ListBox icons
	iListBox->ItemDrawer()->FormattedCellData()->SetIconArray( icons );
	iListBox->ItemDrawer()->FormattedCellData()->SetSubCellAlignmentL(2, CGraphicsContext::ELeft);

	// Set the model...
	if ( iListBox )
		{
		// Sets list items
		iListBox->Model()->SetItemTextArray( iDocument->GetTextArrayForListbox() );
		iListBox->Model()->SetOwnershipType( ELbmDoesNotOwnItemArray );
		}

	// Create scrollbar.
	if ( iListBox )
	{
		iListBox->CreateScrollBarFrameL( ETrue );
		iListBox->ScrollBarFrame()->SetScrollBarVisibilityL(
			CEikScrollBarFrame::EOff, CEikScrollBarFrame::EAuto );
	}

	// Empty listbox message
	HBufC* textResource = StringLoader::LoadLC(R_NOTHING_ATTACHED);
	iListBox->View()->SetListEmptyTextL(*textResource);
	iListBox->DrawNow();
	CleanupStack::PopAndDestroy(textResource);

	// Display listbox
	iListBox->SetListBoxObserver( this );
	SizeChanged();
	iListBox->ActivateL();

	// update scroll bar
    if (iListBox)
		{   
		TInt pos(iListBox->View()->CurrentItemIndex());
		if (iListBox->ScrollBarFrame())
			{
			iListBox->ScrollBarFrame()->MoveVertThumbTo(pos);
			}
		}
    }


// Destructor
CMMS_ItContainer3::~CMMS_ItContainer3()
    {
    if(iListBox) delete iListBox;
    }

// ---------------------------------------------------------
// CMMS_ItContainer3::SizeChanged()
// Called by framework when the view size is changed
// ---------------------------------------------------------
//
void CMMS_ItContainer3::SizeChanged()
    {
	    if ( iListBox )
        {
        iListBox->SetRect( Rect() ); // Sets rectangle of lstbox.
        }
    }

// ---------------------------------------------------------
// CMMS_ItContainer3::CountComponentControls() const
// ---------------------------------------------------------
//
TInt CMMS_ItContainer3::CountComponentControls() const
    {
    if(iListBox) return 1; // return nbr of controls inside this container
	return 0;
    }

// ---------------------------------------------------------
// CMMS_ItContainer3::ComponentControl(TInt aIndex) const
// ---------------------------------------------------------
//
CCoeControl* CMMS_ItContainer3::ComponentControl(TInt aIndex) const
    {
    switch ( aIndex )
        {
        case 0:
			{
            if(iListBox)
				return iListBox;
			else
				return NULL;
			break;
			}
        default:
            return NULL;
        }
    }

// ---------------------------------------------------------
// CMMS_ItContainer3::Draw(const TRect& aRect) const
// ---------------------------------------------------------
//
void CMMS_ItContainer3::Draw(const TRect& /*aRect*/) const
    {
    }

// ---------------------------------------------------------
// CMMS_ItContainer3::HandleControlEventL(
//     CCoeControl* aControl,TCoeEvent aEventType)
// ---------------------------------------------------------
//
void CMMS_ItContainer3::HandleControlEventL(
    CCoeControl* /*aControl*/,TCoeEvent /*aEventType*/)
    {
    // TODO: Add your control event handler code here
    }

// ---------------------------------------------------------
// CMMS_ItContainer3::OfferKeyEventL(...)
// Notify key events to editors.
// ---------------------------------------------------------
//
TKeyResponse CMMS_ItContainer3::OfferKeyEventL(
    const TKeyEvent& aKeyEvent, TEventCode aType)
    {
        switch ( aKeyEvent.iCode )
        {
		case EKeyOK:
		case EKeyEnter:
			{
			AddAttachmentL();
			return EKeyWasConsumed;
			}
		case EKeyBackspace:
			RemoveAttachmentL();
			return EKeyWasConsumed;
			break;
        default:
            if ( iListBox )
				return iListBox->OfferKeyEventL( aKeyEvent, aType );
			else
				return EKeyWasNotConsumed;
            break;
        }
    }

void CMMS_ItContainer3::AddAttachmentL()
    {
	// ask for file name
	TFileName filename;
	if(!AknCommonDialogs::RunSelectDlgLD(filename, R_FILE_SELECTION_DIALOG))
		return;

	iDocument->AddAttachmentL(filename);

	// Updates listbox.
	iListBox->HandleItemAdditionL();
	iListBox->SetCurrentItemIndexAndDraw(iListBox->Model()->NumberOfItems() - 1);

	UpdateNaviPanelL();

	iListBox->DrawNow();

    }

void CMMS_ItContainer3::AddAttachmentManuallyL()
    {
	TFileName filename;

	// ask for file name
	CAknTextQueryDialog* fileDialog = CAknTextQueryDialog::NewL(filename, CAknQueryDialog::ENoTone);
	if (!fileDialog->ExecuteLD(R_MMS_IT_FILE_DIALOG))
		return;

	// check that the file exists
	if(!iDocument->AddAttachmentL(filename))
	{
		HBufC* textResource = StringLoader::LoadLC(R_FILE_NOT_FOUND);
		CAknErrorNote* note = new (ELeave) CAknErrorNote();
		note->ExecuteLD(*textResource);
		CleanupStack::PopAndDestroy(textResource);
		return;
	}

	// Updates listbox.
	iListBox->HandleItemAdditionL();
	iListBox->SetCurrentItemIndexAndDraw(iListBox->Model()->NumberOfItems() - 1);

	UpdateNaviPanelL();

	iListBox->DrawNow();

    }

void CMMS_ItContainer3::RemoveAttachmentL()
{
	// check whether there are no attachments
	if(iDocument->CountAttachments() == 0)
	{
		HBufC* textResource = StringLoader::LoadLC(R_NO_ATTACHMENTS);
		CAknInformationNote* note = new (ELeave) CAknInformationNote();
		note->ExecuteLD(*textResource);
		CleanupStack::PopAndDestroy(textResource);
		return;
	}

	TInt currentItem = iListBox->CurrentItemIndex();

	// Actually delete the attachment (not the attached file!)
	iDocument->RemoveAttachment(currentItem);
	iListBox->HandleItemRemovalL();

	UpdateNaviPanelL();

	// Redraw
	if(iDocument->CountAttachments() != 0)
	{
		if(currentItem >= iDocument->CountAttachments())
		{
			iListBox->SetCurrentItemIndexAndDraw(iDocument->CountAttachments() -1);
		}
		else
		{
			iListBox->SetCurrentItemIndexAndDraw(currentItem);
		}
		
	}
	iListBox->DrawNow();
}

void CMMS_ItContainer3::RemoveAllAttachments()
{
	// remove all attachments
	iDocument->ResetAttachments();
	iListBox->HandleItemRemovalL();

	UpdateNaviPanelL();
}

void CMMS_ItContainer3::EditMimeType()
{
	// check whether there are no attachments
	if(iDocument->CountAttachments() == 0)
	{
		HBufC* textResource = StringLoader::LoadLC(R_NO_ATTACHMENTS);
		CAknInformationNote* note = new (ELeave) CAknInformationNote();
		note->ExecuteLD(*textResource);
		CleanupStack::PopAndDestroy(textResource);
		return;
	}

	TBuf<40> MIMEType;
	// ask for file name
	CAknTextQueryDialog* mimeDialog = CAknTextQueryDialog::NewL(MIMEType, CAknQueryDialog::ENoTone);
	if (!mimeDialog->ExecuteLD(R_MMS_IT_MIME_DIALOG))
		return;

	TBuf8<40> MIMEType8;

	CnvUtfConverter::ConvertFromUnicodeToUtf8(MIMEType8, MIMEType);

	SetMimeTypeL(MIMEType8);
}

void CMMS_ItContainer3::SetMimeTypeL(TDes8& aMimeType)
{
	// check whether there are no attachments
	if(iDocument->CountAttachments() == 0)
	{
		HBufC* textResource = StringLoader::LoadLC(R_NO_ATTACHMENTS);
		CAknInformationNote* note = new (ELeave) CAknInformationNote();
		note->ExecuteLD(*textResource);
		CleanupStack::PopAndDestroy(textResource);
		return;
	}

	TInt currentItem = iListBox->CurrentItemIndex();
	iDocument->SetMimeTypeL(currentItem, aMimeType);
	iListBox->SetCurrentItemIndexAndDraw(currentItem);
}

void CMMS_ItContainer3::ResetMimeTypeL()
{
	// check whether there are no attachments
	if(iDocument->CountAttachments() == 0)
	{
		HBufC* textResource = StringLoader::LoadLC(R_NO_ATTACHMENTS);
		CAknInformationNote* note = new (ELeave) CAknInformationNote();
		note->ExecuteLD(*textResource);
		CleanupStack::PopAndDestroy(textResource);
		return;
	}

	TInt currentItem = iListBox->CurrentItemIndex();
	iDocument->ResetMimeTypeL(currentItem);
	iListBox->SetCurrentItemIndexAndDraw(currentItem);
}

void CMMS_ItContainer3::UpdateNaviPanelL()
{
	// Update the navigation pane
	TBuf<40> text;

	HBufC* textResource = StringLoader::LoadLC(R_ATT);
	text.Append(*textResource);
	CleanupStack::PopAndDestroy(textResource);

	text.Append(_L(": "));
	text.AppendNum(iDocument->GetAttachmentsSize());
	text.Append(_L(" Bytes"));
	iUI->ShowAtNaviPanelL(text);
}

// End of File  
